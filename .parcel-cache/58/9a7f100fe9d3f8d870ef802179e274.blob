//en bordel encore pour l'instant
const RF = require("./RegularFunc");
const PF = require("./polygoneFunctions");
const FL = require("./filter.js")
const polyFactory = PF.polyFactory;
const applyImgBis = RF.applyImgBis;

const fs = require('fs');



const contourDetection1 = [1,0,-1,0,0,0,-1,0,1];
const contourDetection2 = [0,1,0,1,-4,1,0,1,0];
const contourDetection3 = [-1,-1,-1,-1,8,-1,-1,-1,-1] ;
const clarity = [0,1,0,1,-5,1,0,1,0];
const boxBlur = [1/9,1/9,1/9,1/9,1/9,1/9,1/9,1/9,1/9];
const gaussBlury3 =[1/16,2/16,1/16,2/16,4/16,2/16,1/16,2/16,1/16];
const gaussBlury5 =[1/256,2/256,4/256,2/256,1/256,4/256,16/256,24/256,16/256,4/256,6/256,24/256,36/256,24/256,6/256,4/256,16/256,24/256,16/256,4/256,1/256,4/256,6/256,4/256,1/256];
const maskBlury =[-1/256,-4/256,-6/256,-4/256,-1/256,-4/256,-16/256,-24/256,-16/256,-4/256,-6/256,-24/256,476/256,-24/256,-6/256,-4/256,-16/256,-24/256,-16/256,-4/256,-1/256,-4/256,-6/256,-4/256,-1/256];





//printimageStructure("black","white",15,300,300,"theNewSquare",regularSquare);
// Image 1
const [image,canvas,context] = RF.initCanvas(300,300);//width and height
let imageStructure = {img:image,h:canvas.height,w:canvas.width};
console.log(("canvas intialised"));

// Image 2
const [image2,canvas2,context2] = RF.initCanvas(300,300);//width and height
let imageStructure2 = {img:image2,h:canvas2.height,w:canvas2.width};



let square = polyFactory(4,25);
// console.log(square(0,0));//problème de round : -1

// console.log(rotate(square(50,50),0,50,50));
let triangle = polyFactory(3,25);
let hexagone = polyFactory(6,25);
let octagone = polyFactory(8,25);

let colorArray = [[0,200,0,255],[200,0,0,255]];
let colorArray2 = [[0,200,100,255],[200,150,0,255],[0,0,200,255]];
const h = imageStructure.h;
const w = imageStructure.w;
//A SUPPRIMER
// function polygoneDrawingPattern(number_vertices,size,h,w,x_s=0,y_s=0,x_j=size,y_j=size,rot=0);
// let colorArray = [[200,200,0,255]];
// applyImgBis(imageStructure,colorArray,PF.triangleTilingCondition1(3,20,h,w),PF.triangleTilingCondition2(3,20,h,w));//triangle
// applyImgBis(imageStructure,colorArray,PF.triangleTilingCondition1(3,15,h,w),PF.triangleTilingCondition2(3,15,h,w));//triangle//problème d'approx
// applyImgBis(imageStructure,colorArray,PF.squareTilingCondition1(4,10,h,w),PF.squareTilingCondition2(4,10,h,w));// square
// applyImgBis(imageStructure,colorArray,PF.squareTilingCondition1(4,20,h,w),PF.squareTilingCondition2(4,20,h,w));// square

// applyImgBis(imageStructure,colorArray2,PF.hexagoneTilingCondition1(6,30,h,w),PF.hexagoneTilingCondition2(6,30,h,w),PF.hexagoneTilingCondition3(6,30,h,w));// hexagone
// applyImgBis(imageStructure,colorArray2,PF.hexagoneTilingCondition1(6,10,h,w),PF.hexagoneTilingCondition2(6,10,h,w),PF.hexagoneTilingCondition3(6,10,h,w));// hexagone

// applyImgBis(imageStructure,colorArray,PF.squareTilingCondition1(4,30,h,w),PF.squareTilingCondition2(4,20,h,w));// square
// applyImgBis(imageStructure,colorArray,PF.polygoneDrawingPattern(4,10,h,w,10,undefined,undefined,y_j=30,Math.PI/4),PF.polygoneDrawingPattern(4,10,h,w,undefined,undefined,undefined,y_j=60,Math.PI/4));//general drawing pattern

const colorArray3 = [[0,255,0,255],[200,255,10,255],[0,0,255,255],[255,10,255,255]];//que les deuxième sont appliqués

//semi regular tiling
// applyImgBis(imageStructure,colorArray,PF.triangleSemiTilingCondition1(3,30,h,w),PF.squareSemiTilingCondition1(4,30,h,w));
applyImgBis(imageStructure,colorArray3,PF.triangleSemiTilingCondition2(3,30,h,w),PF.triangleSemiTilingCondition1(3,30,h,w),PF.squareSemiTilingCondition1(4,30,h,w),PF.squareSemiTilingCondition2(4,30,h,w));
// applyImgBis(imageStructure,colorArray3,PF.triangleSemiTilingCondition1(3,30,h,w),[(x,y)=>false],PF.squareSemiTilingCondition2(4,30,h,w),PF.squareSemiTilingCondition2(4,30,h,w));
applyImgBis(imageStructure2,colorArray2,PF.squareTilingCondition1(4,30,h,w),PF.squareTilingCondition2(4,20,h,w));// square

console.log(imageStructure);

//fiters:

FL.printOperation(imageStructure.img,imageStructure2.img,"firstProduct",FL.product);//creat an image with name product
FL.printOperation(imageStructure.img,imageStructure2.img,"secondProduct",FL.screen);
// FL.applyFilter(imageStructure,FL.matrixFilter,clarity,3);//3 est la taille de la matrice à appliquer
// FL.applyFilter(imageStructure,FL.matrixFilter,contourDetection1,3);
// FL.applyFilter(imageStructure,FL.matrixFilter,gaussBlury5,3);











RF.show(imageStructure,canvas,context,fs,"theBestNewmainOPTITESTFilter");
